<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'doctrine.orm.default_second_level_cache.cache_configuration' shared service.

include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/CacheConfiguration.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/Logging/CacheLogger.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/Logging/CacheLoggerChain.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/Logging/StatisticsCacheLogger.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/CacheFactory.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/DefaultCacheFactory.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/RegionsConfiguration.php';

$this->services['doctrine.orm.default_second_level_cache.cache_configuration'] = $instance = new \Doctrine\ORM\Cache\CacheConfiguration();

$a = new \Doctrine\ORM\Cache\Logging\CacheLoggerChain();
$a->setLogger('statistics', new \Doctrine\ORM\Cache\Logging\StatisticsCacheLogger());

$instance->setCacheLogger($a);
$instance->setCacheFactory(new \Doctrine\ORM\Cache\DefaultCacheFactory(${($_ = isset($this->services['doctrine.orm.default_second_level_cache.regions_configuration']) ? $this->services['doctrine.orm.default_second_level_cache.regions_configuration'] : $this->services['doctrine.orm.default_second_level_cache.regions_configuration'] = new \Doctrine\ORM\Cache\RegionsConfiguration()) && false ?: '_'}, ${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.default_second_level_cache.region_cache_driver']) ? $this->services['doctrine_cache.providers.doctrine.orm.default_second_level_cache.region_cache_driver'] : $this->load('getDoctrineCache_Providers_Doctrine_Orm_DefaultSecondLevelCache_RegionCacheDriverService.php')) && false ?: '_'}));
$instance->setRegionsConfiguration(new \Doctrine\ORM\Cache\RegionsConfiguration());

return $instance;
