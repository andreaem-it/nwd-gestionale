{% extends 'base.html.twig' %}
{% block title %}Cliente{% endblock %}
{% block body %}
        <div class="main-panel">
        <div class="content-wrapper">
            <div class="row">
                <div class="col-9">
                    <h3>Cliente <small>Modifica</small></h3>
                </div>
            </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-body">
                        {{ form_start(form) }}
                        <div class="row mt-2">
                            <div class="col-12">
                                {{ form_label(form.name) }}
                                {{ form_widget(form.name) }}
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-5">
                                {{ form_label(form.address) }}
                                {{ form_widget(form.address) }}
                            </div>
                            <div class="col-2">
                                {{ form_label(form.postal_code) }}
                                {{ form_widget(form.postal_code) }}
                            </div>
                            <div class="col-4">
                                {{ form_label(form.city) }}
                                {{ form_widget(form.city) }}
                            </div>
                            <div class="col-1">
                                {{ form_label(form.province) }}
                                {{ form_widget(form.province) }}
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-6">
                                {{ form_label(form.phone) }}
                                {{ form_widget(form.phone) }}
                            </div>
                            <div class="col-6">
                                {{ form_label(form.email) }}
                                {{ form_widget(form.email) }}
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-12">
                                <div class="custom-control custom-checkbox">
                                    {{ form_widget(form.privacy_accepted) }}
                                    {{ form_label(form.privacy_accepted, 'Privacy Accettata', { 'label_attr': {'class' : 'custom-control-label'}}) }}
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-12">
                                {{ form_widget(form.submit) }}

                            </div>
                        </div>
                        {{ form_end(form) }}
                    </div>
                </div>
            </div>

        </div>
            <script>
                var placeSearch, autocomplete;
                var componentForm = {
                    street_number: 'short_name',
                    route: 'long_name',
                    locality: 'short_name',
                    administrative_area_level_1: 'short_name',
                    country: 'short_name',
                    postal_code: 'long_name'
                };

                function initAutocomplete() {
                    // Create the autocomplete object, restricting the search to geographical
                    // location types.
                    autocomplete = new google.maps.places.Autocomplete(
                        /** @type {!HTMLInputElement} */(document.getElementById('form_address')),
                        {types: ['geocode']});

                    // When the user selects an address from the dropdown, populate the address
                    // fields in the form.
                    autocomplete.addListener('place_changed', fillInAddress);
                }

                function fillInAddress() {
                    // Get the place details from the autocomplete object.
                    var place = autocomplete.getPlace();

                    console.log(place);

                    $('#form_address').val(place['address_components'][0]['short_name']);
                    $('#form_province').val(place['address_components'][3]['short_name']);
                    $('#form_city').val(place['address_components'][2]['long_name']);
                    $('#form_postal_code').val(place['address_components'][6]['long_name']);

                    for (var component in componentForm) {
                        document.getElementById(component).value = '';
                        document.getElementById(component).disabled = false;
                    }

                    // Get each component of the address from the place details
                    // and fill the corresponding field on the form.
                    for (var i = 0; i < place.address_components.length; i++) {
                        var addressType = place.address_components[i].types[0];
                        if (componentForm[addressType]) {
                            var val = place.address_components[i][componentForm[addressType]];
                            document.getElementById(addressType).value = val;
                        }
                    }
                }

                // Bias the autocomplete object to the user's geographical location,
                // as supplied by the browser's 'navigator.geolocation' object.
                function geolocate() {
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(function(position) {
                            var geolocation = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude
                            };
                            var circle = new google.maps.Circle({
                                center: geolocation,
                                radius: position.coords.accuracy
                            });
                            autocomplete.setBounds(circle.getBounds());
                        });
                    }
                }
            </script>
            <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD7BG7Z8rK75xxgo-njpJ9kBSV6iRlhQnk&libraries=places&callback=initAutocomplete" async defer></script>

        </div>
    </div>
{% endblock %}